#!/bin/sh
# patchadams v3.0
# copyright 2014 scott@stg.net
# GPLv2
set -ex

die()
{
	echo $*
	exit 1
}

which convert >/dev/null || die "Error: must install ImageMagick"

get_build_dir()
{
	[ ! -f ~/.rpmmacros ] && echo "ERROR: no ~/.rpmmacros file?" && exit 1
	TMP="`fgrep '%_topdir' ~/.rpmmacros`"
	[ -z "$TMP" ] && echo "ERROR: no %_topdir in ~/.rpmmacros file?" && exit 1
	export BUILD_DIR="${TMP#%_topdir }"
}

parse_spec_file()
{
	cat $1 | while echo "reading line" >&2 ; read SPECLINE
	do
		LINE="${SPECLINE%%#*}"
		[ -z "$LINE" ] && continue
		[ "${LINE:0:12}" = "%description" ] && break
		[ "${LINE:0:1}" = "%" ] && continue
		VAR="${LINE%%: *}"
		VAL=$(echo ${LINE#*: })
		if [ "$VAR" = "$VAL" ]
		then
			echo "### Ignoring: $LINE" >&2
			continue
		fi 
		#VAL="`echo $VAL |sed -e 's/%{?/${_/g' -e 's/%{/${/g'`"
		VAR="`echo $VAR |tr '[:upper:]()' '[:lower:]__'`"
		[[ "$VAL" =~ "%" ]] && VAL="`rpmbuild -E \"$VAL\" $1 2>/dev/null || true`" && read PAUSE <&2

		echo export $VAR=\"$VAL\"
	done > /tmp/patmp.$$
	. /tmp/patmp.$$
	rm /tmp/patmp.$$
}

apply_patchlist()
{
	PATCHLIST="$1"
	ORIG_DIR="$2"
	DEST_DIR="$3"

	echo "Applying $PATCHLIST"

	[ -z "$PATCHLIST" ] && echo "ERROR: patchlist not provided" && exit 1
	[ -z "$ORIG_DIR" ] && echo "ERROR: original dir not provided" && exit 1
	[ -z "$DEST_DIR" ] && echo "ERROR: patched dir not provided" && exit 1

	if [ ! -f $PATCHLIST ]
	then
		echo "### WARNING: STARTING NEW PATCHLIST $PATCHLIST"
		echo "# Patchlist created `date`" > $PATCHLIST
		#git add $PATCHLIST
	fi
	[ ! -d $ORIG_DIR ] && echo "ERROR: original dir not found" && exit 1
	[ ! -d $DEST_DIR ] && echo "ERROR: patched dir not found" && exit 1

	[ -f project-settings ] && . ./project-settings
	[ -z "$NAME" ] && echo "ERROR: NAME is not set" && exit 1
	[ -z "$FONT" ] && echo "ERROR: FONT is not set" && exit 1
	[ -z "$LOGO" ] && echo "ERROR: LOGO is not set" && exit 1
	[ -z "$SED" ] && echo "ERROR: SED is not set" && exit 1

	# first, process existing entries in the patchlist

	cat $PATCHLIST | while read PATCHLINE
	do
		set -e
		LINE="$PATCHLINE"
		[ -z "$LINE" ] && continue
		[ "${LINE:0:1}" = "#" ] && continue
		ORIG="${LINE%%: *}"
		[ "$ORIG" = "$LINE" ] && echo "ERROR: bad patchlist: $LINE" && exit 1
		[ "$ORIG" = "${LINE#*: }" ] && echo "ERROR: problem patchlist: $LINE" && exit 1
		
		# 'patch' the file path (remove trademark)
		FILE="`echo $ORIG | sed -f $SED`"
		[ -z "$FILE" ] && echo "ERROR: file empty after sed" && exit 1

		# the patch cmd may want a temp file of matching extension
		EXT="${ORIG##*.}"
		TEMP="patmp$$.$EXT"

		# add the full path
		ORIG="$ORIG_DIR/$ORIG"
		FILE="$DEST_DIR/$FILE"

		# switch to escaped versions for cmd
		UE_ORIG="$ORIG"
		UE_FILE="$FILE"
		ORIG="${ORIG// /\\ }"
		FILE="${FILE// /\\ }"
		ORIG="${ORIG//(/\\(}"
		FILE="${FILE//(/\\(}"
		ORIG="${ORIG//)/\\)}"
		FILE="${FILE//)/\\)}"

		# sanity check
		#[ ! -f "$UE_ORIG" ] && echo "ERROR: Source file $UE_ORIG not found" && exit 1
		[ ! -f "$UE_ORIG" ] && echo "WARNING: Source file $UE_ORIG not found" && continue

		# insure the full directory tree is created
		mkdir -p "${FILE%/*}" #`dirname $FILE`

		CMD=${LINE#*: }
		[ "$CMD" = "copy" ] && CMD="cp -v $ORIG $FILE"
		[ "$CMD" = "patch" ] && CMD="sed -f $SED <$ORIG >$FILE"
		eval $CMD
		[ $? -ne 0 ] && echo "ERROR: patch failed" && exit 1
		[ -f $TEMP ] && rm -f $TEMP
		set +e
	done
	set -e

	# second, check each file in ORIG dir to insure nothing missed
	# anything not found is added to patchlist and the patch fails

	rm -f $BUILD_DIR/failed

	echo "Checking destination for missed files..."
	find $ORIG_DIR -type f | while read ORIG_PATH
	do
		set -e
		# remove the dir from path
		ORIG=${ORIG_PATH:${#ORIG_DIR}}
		ORIG=${ORIG:1}
		[ ! -f "$ORIG_DIR/$ORIG" ] && echo "ERROR: $ORIG path failure" && exit 1

		# escape any spaces in the file name
		#ORIG="${ORIG// /\\ }"

		# convert the destination file name
		FILE="`echo $ORIG |sed -f $SED`"
		[ -z "$FILE" ] && echo "ERROR: file empty after sed" && exit 1

		# insure the full directory tree is created
		MKPATH="$DEST_DIR/$FILE"
		mkdir -p ${MKPATH%/*} #`dirname $DEST_DIR/$FILE`

		if [ ! -f "$DEST_DIR/$FILE" ]
		then
			echo "WARNING: $FILE not in patchlist"

			E_ORIG="${ORIG// /\\ }"
			#TYPE="`file -b $ORIG_DIR/$E_ORIG` "
			TYPE=$(file -b "$ORIG_DIR/$ORIG")

			echo "" >> $PATCHLIST
			echo "# $ORIG = $TYPE" >> $PATCHLIST
			TRADEMARK=0
			fgrep -i centos $ORIG_DIR/$ORIG >/tmp/pafgrep.$$ && TRADEMARK=1
			# certain file types can hide trademark 
			[[ "$TYPE" =~ " image " ]] && TRADEMARK=1
			[[ "$TYPE" =~ " icon " ]] && TRADEMARK=1
			[[ "$TYPE" =~ " compressed " ]] && TRADEMARK=1
			[[ "$TYPE" =~ " data " ]] && TRADEMARK=1

			if [ $TRADEMARK -eq 1 ]
			then
				# flag possible trademark as failed for inspection
				sed 's/^/# /g' </tmp/pafgrep.$$ >> $PATCHLIST
				echo "$ORIG: false" >> $PATCHLIST
				touch $BUILD_DIR/failed
			else
				# files deemed safe go ahead and copy
				echo "$ORIG: copy" >> $PATCHLIST
				cp "$ORIG_PATH" "$DEST_DIR/$FILE"
			fi
			rm -f /tmp/pafgrep.$$
		fi
	done

	if [ -f $BUILD_DIR/failed ]
	then
		echo "ERROR: $PATCHLIST incomplete"
		exit 1
	fi
}

process_upstream_srpm()
{
	SRPM_PATH="$1"

	REPO=${SRPM_PATH%/*}
	REPO=${REPO##*/}

	DEST_DIR="PennyOS/$REPO"
	mkdir -p $DEST_DIR

	# try to guess at correct dest src.rpm file
	DEST_FILE=${SRPM_PATH##*/}
	DEST_FILE=${DEST_FILE%.src.rpm}
	DEST_FILE=${DEST_FILE%.centos}
	DEST_FILE=${DEST_FILE%.el6}

	DEST_FILE="$DEST_FILE.centos.src.rpm"

	if [ -f "$DEST_DIR/$DEST_FILE" ]
	then
		echo "SKIPPING $DEST_FILE as it already exists"
		sleep 3
		continue
	fi

	get_build_dir
	[ -z "$BUILD_DIR" ] && echo "ERROR: no BUILD_DIR?" && exit 1

	[ ! -d $BUILD_DIR/SOURCES ] && echo "ERROR: no SOURCES path?" && exit 1
	[ ! -d $BUILD_DIR/SPECS ] && echo "ERROR: no SPECS path?" && exit

		# make sure both are empty
		rm -rf $BUILD_DIR/SOURCES/* $BUILD_DIR/SPECS/*

		echo "Processing $SRPM_PATH"
		rpm -ihv $SRPM_PATH
		SPEC_FILE=$BUILD_DIR/SPECS/*.spec
		[ -z "$SPEC_FILE" ] && echo "ERROR: spec file not found" && exit 1
		SPEC_FILE="`basename $SPEC_FILE`"
		PKG_NAME="${SPEC_FILE%.spec}"
		echo "Package name: $PKG_NAME"

		SRPM_FILE="${SRPM_PATH##*/}"

		# this doesn't work to locate the tarball
		#source=""
		#source0=""
		#parse_spec_file $BUILD_DIR/SPECS/$SPEC_FILE
		#[ -z "$source" -a ! -z "$source0" ] && source="$source0"
		#[ -z $source ] && echo "ERROR: no source?" && exit 1
		#if [[ ${source:0:5} == "http:" || ${source:0:6} == "https:" ]]
		#then
		#	# this is not a source we can patch
		#	# set the path to something invalid to skip tarball
		#	echo "WARNING: Not patching $source"
		#	source="-not-patching-"
		#else
		#	[ ! -f $BUILD_DIR/SOURCES/$source ] && echo "ERROR: file $source not found" && exit 1
		#fi

		TARBALLS=(`echo $BUILD_DIR/SOURCES/*.tar.*`)
		TBCOUNT=0

		for TARBALL_FILE in ${TARBALLS[@]}
		do
			TBCOUNT=`expr $TBCOUNT + 1`
			SUFFIX="tarball"
			[ $TBCOUNT -gt 1 ] && SUFFIX="tarball$TBCOUNT"

			[ ! -f $TARBALL_FILE ] && TARBALLS=""
			TARBALL="${TARBALL_FILE##*/}"

			# prepare target directory
			rm -rf $BUILD_DIR/PATCHED
			mkdir -p $BUILD_DIR/PATCHED

			TARDIS="${TARBALL%.tar.*}"
			PATCHLIST="$PKG_NAME.$SUFFIX.patchlist"
			echo "Patching tarball $TARDIS with $PATCHLIST"

			rm -rf $BUILD_DIR/ORIGINAL
			mkdir -p $BUILD_DIR/ORIGINAL
			tar xf $BUILD_DIR/SOURCES/$TARBALL --directory=$BUILD_DIR/ORIGINAL 

			if [ ! -d $BUILD_DIR/ORIGINAL/$TARDIS ]
			then
				# tar directory may be different than tarball name
				TARDIR=(`echo $BUILD_DIR/ORIGINAL/*`)
				[ ${#TARDIR[@]} -ne 1 ] && echo "ERROR: tarball extraction did not result in expected single directory" && ls $BUILD_DIR/ORIGINAL && exit 1
				TARDIS="${TARDIR##*/}"
			fi

			[ ! -d $BUILD_DIR/ORIGINAL/$TARDIS ] && echo "ERROR: tarball directory $TARDIS not found after tarball extraction" && ls $BUILD_DIR/ORIGINAL && exit 1

			rm -rf $BUILD_DIR/NEWBALL
			mkdir -p $BUILD_DIR/NEWBALL/$TARDIS
			apply_patchlist $PATCHLIST  $BUILD_DIR/ORIGINAL/$TARDIS $BUILD_DIR/NEWBALL/$TARDIS

			tar cf $BUILD_DIR/PATCHED/$TARBALL --directory=$BUILD_DIR/NEWBALL $TARDIS
			rm -rf $BUILD_DIR/NEWBALL
			# also, remove the original tarball so it's not in patchlist
			rm -rf $BUILD_DIR/SOURCES/$TARBALL
		done

		apply_patchlist $PKG_NAME.patchlist $BUILD_DIR/SOURCES $BUILD_DIR/PATCHED

		rm -rf $BUILD_DIR/SOURCES
		mv $BUILD_DIR/PATCHED $BUILD_DIR/SOURCES

		# "patch" the spec file too - in case filename changed
		[ -f project-settings ] && . ./project-settings
		sed -i -f $SED $BUILD_DIR/SPECS/$PKG_NAME.spec

		echo "Rebuilding src rpm"
		rpmbuild -bs $BUILD_DIR/SPECS/$PKG_NAME.spec

		NEW_SRCRPM=$BUILD_DIR/SRPMS/*.src.rpm

		[ -z "$NEW_SRCRPM" ] && echo "ERROR: no src rpm found" && exit 1

		mv $NEW_SRCRPM $DEST_DIR
		# now push it up to mirror and trigger rebuild

		rm -rf $BUILD_DIR/*/*
}
process_upstream()
{

	#find Upstream | fgrep '.src.rpm' | while read SRPM_FILE
	for SRPM_PATH in $(find Upstream -type f)
	do
		process_upstream_srpm $SRPM_PATH
	done
}

process_upstream
#process_upstream_srpm Upstream/os/thunderbird-17.0.10-1.el6.centos.src.rpm
