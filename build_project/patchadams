#!/bin/sh
# this script patches a source RPM and rebuilds it
# run by the build system, although it can be run manually to test
#
# $1 argument is the project url to get files from
# $2 argument is a URL to the source RPM to patch

PROJECT_URL="$1"
SRCRPM_URL="$2"
[ -z "$PROJECT_URL" ] && exit 1
[ -z "$SRCRPM_URL" ] && exit 1

# exit on any error
set -e
# log what steps are run in case of a failure
set -x

MOCK64="PennyOS-6-x86_64"
MOCK64_RESULTS="/var/li/mock/$MOCK64/results"
MOCK64_ROOT="/var/lib/mock/$MOCK64/root"
MOCK64_BUILD="/var/lib/mock/$MOCK64/root/builddir/build"

MOCK32="PennyOS-6-i386"
MOCK32_RESULTS="/var/li/mock/$MOCK32/results"
MOCK32_ROOT="/var/lib/mock/$MOCK32/root"
MOCK32_BUILD="/var/lib/mock/$MOCK32/root/builddir/build"

# download the mock config for this build
wget -q $PROJECT_URL/$MOCK64.cfg
wget -q $PROJECT_URL/$MOCK32.cfg
[ ! -f $MOCK64.cfg ] && echo "ERROR: $MOCK64 file is missing" && exit 1
[ ! -f $MOCK32.cfg ] && echo "ERROR: $MOCK32 file is missing" && exit 1

# this should not need sudo, /etc/mock set to mock group in agent install
[ -f /etc/mock/$MOCK64.cfg ] || cp $MOCK64.cfg /etc/mock
[ -f /etc/mock/$MOCK32.cfg ] || cp $MOCK32.cfg /etc/mock
# don't just copy them in every time, or mock wastes time rebuilding chroot
diff $MOCK64.cfg /etc/mock/$MOCK64.cfg || cp $MOCK64.cfg /etc/mock
diff $MOCK32.cfg /etc/mock/$MOCK32.cfg || cp $MOCK32.cfg /etc/mock

# initialize the chroot
# note: mock may not exit non-zero on failure (bug!)
# so tee output and check it for ERROR
mock -r $MOCK64 --init |tee mock-output
grep ^ERROR mock-output && exit 1

# install source rpm in chroot
mock -r $MOCK64 --shell "rpm -ihv  $SRCRPM_URL"  |tee mock-output
grep ^ERROR mock-output && exit 1

# there should be exactly 1 spec file in the spec directory
PKGNAME="`basename $MOCK64_BUILD/SPECS/*.spec .spec`"
if [ -z "$PKGNAME" ]
then
    echo "ERROR: Unable to determine package from spec file name"
    exit 1
fi
echo "Package name is $PKGNAME"

# patch the patches
if !fgrep -i centos $MOCK64_BUILD/SOURCES/*.patch
then
    echo "Patching..."
    UNPATCHED=/tmp/patch.$$
    rm -rf $UNPATCHED
    mkdir $UNPATCHED
    cp $MOCK64_BUILD/SOURCES/*.patch $UNPATCHED

    sed -i -e 's/centos\./PennyOS./g' -e 's/CentOS/PennyOS/g' -e 's/\"centos\"/\"PennyOS\"/g' -e 's/Centos/PennyOS/g' $MOCK64_BUILD/SOURCES/*.patch

    if !fgrep -i centos $MOCK64_BUILD/SOURCES/*.patch
    then
        echo "ERROR: Patch of $PKGNAME failed" 
        exit 1
    fi
    diff -r $PATCHED $MOCK64_BUILD/SOURCES > $PKGNAME.diff
fi

# recreate source rpm
mock -r $MOCK64 --shell "rpmbuild -bs /builddir/build/SPECS/$PKGNAME.spec"  |tee mock-output
grep ^ERROR mock-output && exit 1

NEW_SRCRPM="`basename $MOCK64_BUILD/SRPMS/*.src.rpm`"
if [ -z "$NEW_SRCRPM" ]
then
    echo "ERROR: could not find new .src.rpm file"
    exit 1
fi

# copy it to our directory, it goes home with us
mkdir SRPMS
cp -v $MOCK64_BUILD/SRPMS/$NEW_SRCRPM SRPMS

# now rebuild for 64bit
mock -r $MOCK64 --rebuild SRPMS/$NEW_SRCRPM |tee mock-output
grep ^ERROR mock-output && exit 1

mkdir x86_64
cp -v $MOCK64_BUILD/RPMS/* x86_64

# and finally for 32bit
mock -r $MOCK32 --rebuild SRPMS/$NEW_SRCRPM |tee mock-output
grep ^ERROR mock-output && exit 1

mkdir i386
cp -v $MOCK32_BUILD/RPMS/* i386

rm -f mock-output

echo "$PKGNAME" > package_name.txt
echo "### BUILD COMPLETED SUCCESSFULLY ###"
exit 0
